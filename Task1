//Program.cs

using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using log4net.Config;
using log4net;
using static System.Net.Mime.MediaTypeNames;
using System.IO;

namespace Week4AssessmentApp
{
    public class ServerException : Exception
    {
        public ServerException(string message) : base(message) { }
    }

    public class PrescriptionCost
    {
        public int PrescriptionID { get; set; }
        public string PatientName { get; set; }
        public string Medication { get; set; }
        public double Cost { get; set; }

        public override string ToString()
        {
            return $"ID: {PrescriptionID}, Patient: {PatientName}, Medication: {Medication}, Cost: ${Cost}";
        }
    }


    public class PrescriptionOperations
    {
        private static readonly ILog log = LogManager.GetLogger(typeof(Program));
      
        private static string connectionString = "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog = Week4Assessment; Integrated Security = True;";

        public static void Read(PrescriptionCost[] prescriptions)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    string query = "SELECT PrescriptionID, PatientName, Medication, Cost FROM Prescriptions";
                    SqlCommand cmd = new SqlCommand(query, conn);

                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();

                    for (int i = 0; i < prescriptions.Length; i++)
                    {
                        if (!reader.Read())
                        {
                            throw new ServerException("[0101]Server Error. Not enough records found."); 
                        }

                        prescriptions[i] = new PrescriptionCost
                        {
                            PrescriptionID = reader.GetInt32(reader.GetOrdinal("PrescriptionID")),
                            PatientName = reader.GetString(reader.GetOrdinal("PatientName")),
                            Medication = reader.GetString(reader.GetOrdinal("Medication")),
                            Cost = Convert.ToDouble(reader.GetDecimal(reader.GetOrdinal("Cost"))) 
                        };
                    }
                }
            }
            catch (SqlException ex)
            {
                throw new ServerException($"[0102]Server Error. {ex.Message}"); 
            }
            catch (ServerException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw new ServerException($"[0103]Server Error. {ex.Message}"); 
            }
        }


        public static void LowestCostPrescription(PrescriptionCost[] prescriptions)
        {
            if (prescriptions == null || prescriptions.Length == 0)
            {
                Console.WriteLine("\nNo prescriptions available.");
                return;
            }
            PrescriptionCost lowestCostPrescription = prescriptions[0];
            for (int i = 1; i < prescriptions.Length; i++)
            {
                if (prescriptions[i].Cost < lowestCostPrescription.Cost)
                {
                    lowestCostPrescription = prescriptions[i];
                }
            }
            Console.WriteLine("\nPrescription with the Lowest Cost:");
            log.Info(lowestCostPrescription);
        }

        public static void SecondHighestCostPrescription(PrescriptionCost[] prescriptions)
        {
           
            double highestCost = double.MinValue;
            double secondHighestCost = double.MinValue;
            PrescriptionCost highestCostPrescription = null;
            PrescriptionCost secondHighestCostPrescription = null;

            foreach (var prescription in prescriptions)
            {
                if (prescription.Cost > highestCost)
                {
                    secondHighestCost = highestCost;
                    highestCost = prescription.Cost;
                    secondHighestCostPrescription = highestCostPrescription;
                    highestCostPrescription = prescription;
                }
                else if (prescription.Cost > secondHighestCost && prescription.Cost < highestCost)
                {
                    secondHighestCost = prescription.Cost;
                    secondHighestCostPrescription = prescription;
                }
            }

            if (secondHighestCostPrescription != null)
            {
                Console.WriteLine("\nPrescription with the Second Highest Cost:");
                log.Info(secondHighestCostPrescription);
            }
            else
            {
                Console.WriteLine("\nNo second highest cost prescription found.");
            }
        }

        public static void SortPrescriptions(PrescriptionCost[] prescriptions)
        {
            int n = prescriptions.Length;

            for (int i = 0; i < n - 1; i++)
            {
                int minIndex = i;
                for (int j = i + 1; j < n; j++)
                {
                    if (string.Compare(prescriptions[j].Medication, prescriptions[minIndex].Medication) < 0)
                    {
                        minIndex = j;
                    }
                }

                if (minIndex != i)
                {
                    PrescriptionCost temp = prescriptions[i];
                    prescriptions[i] = prescriptions[minIndex];
                    prescriptions[minIndex] = temp;
                }
            }

            Console.WriteLine("\nPrescriptions Sorted by Medication Name:");
            foreach (var prescription in prescriptions)
            {
                log.Info(prescription);
            }
        }
    }

    // Main Program class
    class Program
    {
        private static readonly ILog log = LogManager.GetLogger(typeof(Program));

        static void Main()
        {
            

            PrescriptionCost[] prescriptions = new PrescriptionCost[5];

           
            try
                {
                    PrescriptionOperations.Read(prescriptions);
                }
                catch (ServerException ex)
                {
                    log.Error($"{ex.Message}");
                }
             
                PrescriptionOperations.LowestCostPrescription(prescriptions);
                PrescriptionOperations.SecondHighestCostPrescription(prescriptions);
                PrescriptionOperations.SortPrescriptions(prescriptions);

            }

        }
    }



//PrescriptionOperationsTests.cs

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Week4AssessmentApp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Week4AssessmentApp.Tests
{
    [TestClass()]
    public class PrescriptionOperationsTests
    {
        [TestMethod()]
        public void LowestCostPrescriptionTest()
        {
            PrescriptionCost[] prescriptions = new PrescriptionCost[5];
            PrescriptionOperations.Read(prescriptions);

            // Act
            PrescriptionCost expected = new PrescriptionCost
            {
                PrescriptionID = 5,
                PatientName = "Mike",
                Medication = "Medication E",
                Cost = 150
            };
             PrescriptionCost actual = prescriptions[4];
             PrescriptionOperations.LowestCostPrescription(prescriptions);
            // Assert
            Assert.AreEqual(expected.ToString(), actual.ToString());
        }

        [TestMethod()]
        public void SecondHighestCostPrescriptionTest()
        {
            PrescriptionCost[] prescriptions = new PrescriptionCost[5];
            PrescriptionOperations.Read(prescriptions);

            // Act
            PrescriptionCost expected = new PrescriptionCost
            {
                PrescriptionID = 3,
                PatientName = "Smith",
                Medication = "Medication C",
                Cost = 300
            };
             PrescriptionOperations.SecondHighestCostPrescription(prescriptions);
             PrescriptionCost actual = prescriptions[2];
           
            // Assert
            Assert.AreEqual(expected.ToString(), actual.ToString());
        }


        [TestMethod()]
        public void SortPrescriptionsTest()
        {
            PrescriptionCost[] prescriptions = new PrescriptionCost[5];
            PrescriptionOperations.Read(prescriptions);

            // Act
            PrescriptionCost expected = new PrescriptionCost
            {
                PrescriptionID = 1,
                PatientName = "John",
                Medication = "Medication A",
                Cost = 250
            };
            PrescriptionOperations.SortPrescriptions(prescriptions);
            PrescriptionCost actual = prescriptions[0];

            // Assert
            Assert.AreEqual(expected.ToString(), actual.ToString());
        }
    }
}


        
    





