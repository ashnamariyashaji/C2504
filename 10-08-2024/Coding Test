1.Find Employees Who Earn More Than Their Managers
Problem: Given an `Employees` table
with columns `EmployeeID`, `ManagerID`, and `Salary`,
find employees who earn more than their managers.


SELECT EmployeeID,Salary
FROM Employee
WHERE Salary>( Select Salary FROM Employees
                            WHERE EmployeeID=Employee.ManagerID);


2.Find Employees with No Manager
Problem:
Given an `Employees` table
with columns `EmployeeID`, `Name`, and `ManagerID`
(which refers to `EmployeeID` of the manager),
find all employees who do not have a manager.

Table Structure:
```
CREATE TABLE Employees (
EmployeeID INT,
Name VARCHAR(100),
ManagerID INT


SELECT EmployeeID, Name
FROM Employees
WHERE MangerID IS NULL;



3.Find Customers with Multiple Orders
Problem: Given a `Customers` table and an `Orders` table
where `Orders` contains a `CustomerID`,
find customers who have placed more than one order.

Table Structure:
```
CREATE TABLE Customers (
CustomerID INT,
Name VARCHAR(100)
);

CREATE TABLE Orders (
OrderID INT,
CustomerID INT,
OrderDate DATE
);


SELECT c.CustomerID, c.Name
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.Name
HAVING COUNT(o.OrderID) > 1;



4.Find the Monthly Average Sales for Each Salesperson
Problem: Given a `Sales` table
with columns `SalesPersonID`, `SaleAmount`, and `SaleDate`,
find the monthly average sales for each salesperson.


WITH MonthlySales AS (
    SELECT
        SalesPersonID,
        DATEADD(MONTH, DATEDIFF(MONTH, 0, SaleDate), 0) AS MonthStartDate,
        SaleAmount
    FROM Sales
)
SELECT
    SalesPersonID,
    MonthStartDate AS Month,
    AVG(SaleAmount) AS AverageMonthlySales
FROM MonthlySales
GROUP BY SalesPersonID, MonthStartDate;



5.Find Employees with the Most Orders
Problem: Given an `Employees` table and an `Orders` table,
find the employee who has processed the most orders.

Table Structure:
```
CREATE TABLE Employees (
EmployeeID INT,
Name VARCHAR(100)
);

CREATE TABLE Orders (
OrderID INT,
EmployeeID INT
);



--employees who has most order
SELECT e.EmployeeID, e.Name, COUNT(o.OrderID) AS OrderCount
FROM Employees e
JOIN Orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.Name
ORDER BY OrderCount DESC

-----one employee who has most order
SELECT TOP 1 e.EmployeeID, e.Name, COUNT(o.OrderID) AS OrderCount
FROM Employees e
JOIN Orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.Name
ORDER BY OrderCount DESC;
