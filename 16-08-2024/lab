class Point
 {
     public int X { get; set; }

     public int Y { get; set; }

     public override bool Equals(object obj)
     {
         var other = (Point)obj;
         return X == other.X && Y == other.Y;
     }
     public override int GetHashCode()
     {
         return base.GetHashCode();
     }
 }

 internal class Program
 {
     static void Main()
     {
         var p1 = new Point() { X = 1, Y = 2 };
         var p2 = new Point() { X = 1, Y = 2 };
         if (p1.Equals(p2))
         {
             Console.WriteLine("same");
         }
         else
         {
             Console.WriteLine("not same");
         }

     }
 }
-------------------------------------------------------------------------------------------

class Employee
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public int Age { get; set; }
 
        public override string ToString()
        {
            return $"Name: {Name} {Environment.NewLine}" +
                $"Email: {Email} {Environment.NewLine}" +
                $"Age: {Age}";
        }
    }
 
    internal class Program
    {
        static void Main()
        {
            var employees = new Employee[10];
            int count = 0;
 
            while (true)
            {
                Console.WriteLine("1. Add new employee");
                Console.WriteLine("2. Search employee");
                Console.Write("Please enter your option: ");
                var option = Console.ReadLine();
 
                switch (option)
                {
                    case "1":
                        var emp = new Employee();
                        Console.Write("Name: ");
                        emp.Name = Console.ReadLine();
                        Console.Write("Email: ");
                        emp.Email = Console.ReadLine();
                        Console.Write("Age: ");
                        emp.Age = int.Parse(Console.ReadLine());
                        employees[count] = emp;
                        count++;
                        break;
                    case "2":
                        Console.WriteLine("Email: ");
                        var email = Console.ReadLine();
 
                        for (int i = 0; i < count; i++)
                        {
                            var e = employees[i];
                            if (e.Email == email)
                            {
                                Console.WriteLine(e);
                                break;
                            }
                        }
                        break;
                    default:
                        Console.WriteLine("Invalid option");
                        break;
                }
            }
        }
 
    }

--------------------------------------------------------------------------------------------------------------------------

class Employee
{
    public string Name { get; set; }
    public string Email { get; set; }
    public int Age { get; set; }

    public override string ToString()
    {
        return $"Name: {Name} {Environment.NewLine}" +
            $"Email: {Email} {Environment.NewLine}" +
            $"Age: {Age}";
    }
}

class EmployeeManger
{
    private Employee[] _employees = new Employee[10];
    private int _count = 0;

    public void Add()
    {
        var emp = new Employee();
        Console.Write("Name: ");
        emp.Name = Console.ReadLine();
        Console.Write("Email: ");
        emp.Email = Console.ReadLine();
        Console.Write("Age: ");
        emp.Age = int.Parse(Console.ReadLine());
        _employees[_count] = emp;
        _count++;
    }

    public void Search()
    {
        Console.WriteLine("Email: ");
        var email = Console.ReadLine();

        for (int i = 0; i < _count; i++)
        {
            var e = _employees[i];
            if (e.Email == email)
            {
                Console.WriteLine(e);
                break;
            }
        }
    }
}

internal class Program
{
    static void Main()
    {
        var manger = new EmployeeManger();

        while (true)
        {
            Console.WriteLine("1. Add new employee");
            Console.WriteLine("2. Search employee");
            Console.Write("Please enter your option: ");
            var option = Console.ReadLine();

            switch (option)
            {
                case "1":
                    manger.Add();
                    break;
                case "2":
                    manger.Search();
                    break;
                default:
                    Console.WriteLine("Invalid option");
                    break;
            }
        }
    }

}


-----------------------------------------------------------------------------------------------------------------------

class Program
    {
        static string ConvertString(string input, string operation)
        {
            switch (operation.ToLower())
            {
                case "upper":
                    return input.ToUpper();
                    break;
                case "lower":
                    return input.ToLower();
                    break;
                case "trim":
                    return input.Trim();
                    break;
                default:
                    Console.WriteLine("Invalid operation. Please choose 'upper', 'lower', or 'trim'.");
                    return input;
            }
        }
        static void Main()
        {
            Console.WriteLine("Enter a string:");
            string input = Console.ReadLine();

            Console.WriteLine("Choose an operation: upper, lower, trim");
            string operation = Console.ReadLine();

            string result = ConvertString(input, operation);

            Console.WriteLine($"Result: {result}");
        }

    }
